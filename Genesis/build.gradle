plugins {
    id 'application'
    id 'eclipse'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.21.0'
    id "de.undercouch.download" version "4.0.0"
}

// Application Configuration
ext {
    appName = "Genesis"
    appLauncher = "Genesis"
    appPackaging = "RPGFramework"
    appModuleName = "genesis"
    appMainClass = "genesis/org.prelle.genesis.Genesis5Main"
    profile = findProperty('profile') ?: 'development'    
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/groups/public/' }
    mavenLocal()
    maven { url 'https://nexus.gluonhq.com/nexus/content/repositories/releases/' }
}

dependencies {
    implementation "org.apache.logging.log4j:log4j-api:2.17.1"
    implementation "org.apache.logging.log4j:log4j-core:2.17.1"
    implementation "org.prelle:javafx-extensions:4.4.2"
    implementation "de.rpgframework:rpgframework-core:4.2.1-SNAPSHOT"
    implementation "de.rpgframework:rpgframework-chars:4.2.1-SNAPSHOT"
    implementation "de.rpgframework:rpgframework-javafx:4.2.1-SNAPSHOT"
    implementation "de.rpgframework:rpgframework-print:4.2.1-SNAPSHOT"
    implementation "de.rpgframework:rpgframework-products:4.2.1-SNAPSHOT"
    runtimeOnly "org.prelle:simple-persist:3.3.0"
    runtimeOnly "com.sun.mail:javax.mail:1.6.0"
    runtimeOnly "org.prelle.rpgframework:babylon-licensecheck:3.1.0-SNAPSHOT"
    runtimeOnly "de.rpgframework:itextpdf:4.2.0"
    runtimeOnly "org.apache.pdfbox:pdfbox:2.0.22"
    runtimeOnly "org.apache.pdfbox:fontbox:2.0.22"
    runtimeOnly "commons-logging:commons-logging:1.2" 
    runtimeOnly "com.google.code.gson:gson:2.8.9"
}

javafx {
    version = '17.0.0.1'
    modules = ['javafx.controls', 'javafx.media', 'javafx.web', 'javafx.fxml']
}

sourceCompatibility = 11
targetCompatibility = 11

version=rootProject.file('version.txt').text.trim()

//mainClassName = "${ext.appModuleName}/${ext.appMainClass}"
mainClassName = "${ext.appMainClass}"

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

jar {
    manifest {
        attributes( 
          'Main-Class': mainClassName,
          'Implementation-Vendor': 'Stefan Prelle',
          'Implementation-Version': archiveVersion
          )
    }
}

ext.os = org.gradle.internal.os.OperatingSystem.current()

application {
    executableDir = ""
    applicationDefaultJvmArgs = [ "-Dprism.allowhidpi=false",
                                  "-Dglass.win.uiScale=96dpi"]
    if (profile == 'development') {
      applicationDefaultJvmArgs = [ "-Dprism.allowhidpi=false",
                                  "-Dglass.win.uiScale=96dpi",
                                  "-Dprofile=development"]
    } else
    if (profile == 'staging') {
      applicationDefaultJvmArgs = [ "-Dprism.allowhidpi=false",
                                  "-Dglass.win.uiScale=96dpi",
                                  "-Dprofile=staging"]
    } else
    if (profile == 'release') {
      applicationDefaultJvmArgs = [ "-Dprism.allowhidpi=false",
                                  "-Dglass.win.uiScale=96dpi",
                                  "-Dprofile=release"]
    }
}

jlink {
    imageZip = project.file("${buildDir}/distributions/Genesis-${version}-${javafx.platform.classifier}.zip")
    imageDir = project.file("${buildDir}/Genesis-${version}")
    options = ['--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = "${appLauncher}"
        jvmArgs = ["-Dapplication.version=$version","-Dprofile=release","-Djdk.gtk.version=2"]
    }
	secondaryLauncher {
        name = 'Genesis-HiDPI'
        mainClass = "org.prelle.genesis.Genesis5Main"
        jvmArgs = ["-Dapplication.version=$version","-Dglass.win.uiScale=130dpi","-Dprofile=release","-Djdk.gtk.version=2"]
    }
	secondaryLauncher {
        name = 'Genesis-Staging'
        mainClass = "org.prelle.genesis.Genesis5Main"
        jvmArgs = ["-Dapplication.version=$version","-Dprofile=staging","-Djdk.gtk.version=2"]
    }
	secondaryLauncher {
        name = 'Genesis-Staging-HiDPI'
        mainClass = "org.prelle.genesis.Genesis5Main"
        jvmArgs = ["-Dapplication.version=$version","-Dglass.win.uiScale=130dpi","-Dprofile=staging","-Djdk.gtk.version=2"]
    }
    forceMerge('log4j-api','itextpdf','org.apache.pdfbox','gson','babylon.license')
    jpackage {
        // Let the plugin detect the path to the JDK providing the jpackage tool by searching the locations indicated by:
        //  - the badass.jlink.jpackage.home system property
        //  - the BADASS_JLINK_JPACKAGE_HOME environment variable
        //  - the java.home system property
        //  - the JAVA_HOME environment variable
        //
        //   OR
        //
        // explicitly configure the below property:
        //jpackageHome = '/opt/jdk-14'
        //jpackageHome = '/opt/hostedtoolcache/jdk/14.0.2/x64'
        //jpackageHome = "C:/Users/Stefan/workspaces/RPGFramework/Applications/Genesis/Genesis/build/download/jdk-14"
        //
        //   OR
        //
        // download and extract a JDK that contains the jpackage tool by setting the system property 'download.jpackage':
        //if(Boolean.getBoolean('download.jpackage')) {
        //    jpackageHome = downloadJPackage()
        //}

        if(os.macOsX) {
            installerOptions = [
            	  '--mac-package-identifier', 'de.rpgframework.Genesis',
            	  '--mac-package-name', 'Genesis'
//                '--mac-sign',
//                '--mac-signing-key-user-name', System.getenv('SIGNING_KEY_USER_NAME'),
//                '--mac-signing-keychain', System.getenv('SIGNING_KEYCHAIN_PATH')
            ]
        } else if(os.windows) {
        	resourceDir= file("src/main/deploy/package/windows")
            installerType = 'msi' 
            installerOptions = [
            	'--win-per-user-install', 
            	'--win-menu', 
            	'--win-menu-group','RPGFramework',
            	'--win-dir-chooser',
            	'--win-shortcut', 
            	'--verbose',            	
            	'--win-upgrade-uuid', 'e641bb70-6cba-43bf-8070-c1894b6d46e9']
            imageOptions = ['--icon','src/main/deploy/package/windows/Genesis.ico']
         } else {
        	resourceDir= file("src/main/deploy/package/linux")
            installerType = '' // 'rpm'
            installerOptions = [
                '--linux-menu-group', 'RPGFramework', 
                '--linux-app-category', 'Game',
                '--linux-shortcut',
                '--linux-deb-maintainer', 'stefan@rpgframework.de',
                ]
            imageOptions += ['--icon', 'src/main/deploy/package/linux/Genesis.png']
        }
        installerOptions += [
            "--verbose",
            "--app-version", project.version,
            "--copyright", "Stefan Prelle",
            "--description", "A multi-system tabletop RPG generator software",
            "--vendor", "RPGFramework project",
            "--name", "Genesis"
        ]
    }
}


// #### The code below is needed only if you use the downloadJPackage() method to install the jpackage tool ####

/** @return  [url, extension, directory] */
String[] getJPackageCoordinates() {
    if(os.macOsX) return [
        'https://download.oracle.com/otn/java/jdk/14.0.2+12/205943a0976c4ed48cb16f1043c5c647/jdk-14.0.2_osx-x64_bin.tar.gz',
        'tar.gz',
        'jdk-14.jdk/Contents/Home'
    ]
    if(os.windows) return [
        'https://download.oracle.com/otn/java/jdk/14.0.2+12/205943a0976c4ed48cb16f1043c5c647/jdk-14.0.2_windows-x64_bin.zip',
        'zip',
        'jdk-14'
    ]
    return [
        'https://download.oracle.com/otn/java/jdk/14.0.2+12/205943a0976c4ed48cb16f1043c5c647/jdk-14.0.2_linux-x64_bin.tar.gz',
        'tar.gz',
        'jdk-14'
    ]
}

String downloadJPackage() {
    def (url, extension, directory) = getJPackageCoordinates()
    def downloadDir = "$buildDir/download"
    tasks.jpackageImage.doFirst {
        def execExt = os.windows ? '.exe' : ''
        if(!file("$downloadDir/$directory/bin/jpackage$execExt").file) {
            def jdkArchivePath = "$downloadDir/jdk-jpackage.$extension"
            download {
                src url
                dest jdkArchivePath
                overwrite false
            }
            copy {
                from ((extension == 'tar.gz') ? tarTree(resources.gzip(jdkArchivePath)) : zipTree(jdkArchivePath))
                into downloadDir
            }
        }
    }
    return "$downloadDir/$directory"
}

eclipse {
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                    it.entryAttributes['module'] = 'true'
                }

            }
        }
    }
}

